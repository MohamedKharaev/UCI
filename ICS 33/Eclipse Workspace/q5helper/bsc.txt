# Setup
c-->from importlib import reload
c-->import q5solution
c-->reload(q5solution)
c-->import predicate,random
c-->from functools import reduce
c-->from q5solution import compare, is_palindrome, separate, sort, unnested, merge, all_longest

# Test compare
e-->compare('','')-->=
e-->compare('','abc')--><
e-->compare('abc','')-->>
e-->compare('abc','abc')-->=
e-->compare('bc','abc')-->>
e-->compare('abc','bc')--><
e-->compare('aaaxc','aaabd')-->>
e-->compare('aaabd','aaaxc')--><

# Test is-palindrome
e-->is_palindrome('DoGeeseSeeGod')-->True
e-->is_palindrome('AbleWasIEreISawElba')-->True
e-->is_palindrome('AManAPlanACanalPanama')-->True
e-->is_palindrome('DoGeesesSeeGod')-->False
e-->is_palindrome('AbleIWasEhenISawElba')-->False
e-->is_palindrome('AManAPlaneACanalPanama')-->False

# Test separate
e-->separate(predicate.is_positive,[])-->([], [])
c-->s = separate(predicate.is_positive,[1, -3, -2, 4, 0, -1, 8])
==-->(set(s[0]),set(s[1]))-->({1, 4, 8}, {-3, -2, 0, -1})
c-->s = separate(predicate.is_prime,[i for i in irange(2,20)])
==-->(set(s[0]),set(s[1]))-->({2, 3, 5, 7, 11, 13, 17, 19}, {4, 6, 8, 9, 10, 12, 14, 15, 16, 18, 20})
c-->s = separate(lambda x : len(x) <= 3,'to be or not to be that is the question'.split(' '))
==-->(set(s[0]),set(s[1]))-->({'to', 'be', 'or', 'not', 'to', 'be', 'is', 'the'}, {'that', 'question'})
c-->s = separate(lambda x : x <= 'm','to be or not to be that is the question'.split(' '))
==-->(set(s[0]),set(s[1]))-->({'be', 'is'}, {'the', 'question', 'not', 'that', 'or', 'to'})

# Test sort
e-->sort([1,2,3,4,5,6,7])-->[1, 2, 3, 4, 5, 6, 7]
e-->sort([7,6,5,4,3,2,1])-->[1, 2, 3, 4, 5, 6, 7]
e-->sort([4,5,3,1,2,7,6])-->[1, 2, 3, 4, 5, 6, 7]
e-->sort([1,7,2,6,3,5,4])-->[1, 2, 3, 4, 5, 6, 7]
c-->l = [i+1 for i in range(30)]
c-->random.shuffle(l)
c-->l = sort(l)
e-->l-->[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]


# Test unnested
==-->unnested([1,2,4,1,8,1,3,2,1,1])-->[1, 2, 4, 1, 8, 1, 3, 2, 1, 1]
==-->unnested( [[1,2,4,1,8],[1,3,2],1,1])-->[1, 2, 4, 1, 8, 1, 3, 2, 1, 1]
==-->unnested( [[1,2,[4,[1],8],[1,3,2]],[1,1]])-->[1, 2, 4, 1, 8, 1, 3, 2, 1, 1]
==-->unnested( [[1,'b',[4,['a'],8],[1,3,'c']],['d',1]])-->[1, 'b', 4, 'a', 8, 1, 3, 'c', 'd', 1]

# Test merge
e-->merge([],'abc')-->['abc']
e-->merge(['abc', 'lmn'],'wxyz')-->['wxyz']
e-->merge(['abc', 'lmn'],'xyz')-->['abc', 'lmn', 'xyz']
e-->merge(['abc', 'lmn'],'xy')-->['abc', 'lmn']

# Test all_longest
e-->all_longest(open('test1.txt'))-->['cde', 'opq']
e-->all_longest(open('test2.txt'))-->['efgh']